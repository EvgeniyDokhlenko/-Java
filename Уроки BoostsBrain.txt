/*BoostSrain
* Урок 2 Переменные
* 1.Переменная - именованная область памяти.
* 2.Переменная имеет тип. 
* 3.Типы переменных бывают примитивные и ссылочные
* Единицы измерения количества памяти (под необходимое количество информации)
* 1. Минимальное количество информации: 1 бит (о или 1)
* 2. Исторически сложившийся размер: 1 байт = 8 бит (11111111) 255 (64 32 16 8 4 2 1)
* 3. Мнимое сходство: 1 Килобайт = 1024 = 2^10 байт 
* 4. Продолжение: 1 Мегабайт = 1024 Килобайт = 2^20 байт
* 5. Продолжение: 1 Гигабайт = 1024 Мегабайт = 2^30 байт
* 6. Продолжение: 1 Терабайт = 1024 Мегабайт = 2^40 байт


* Примитивные типы
* 1. Целочисленные типы
* byte		1 байт			-128					+127
* short		2 байта			-32768					+32767
* int		4 байта			-2147483648				+2147483647
* long		8 байт			-9223372036854775808			+9223372036854775807
* 9223372036854775807 - девять квинтиллионов двести двадцать три квадриллиона
* триста семьдесят два триллиона тридцать шесть миллиардов восемьсот пятьдесят четыре миллиона
* семьсот семьдесят пять тысяч восемьсот семь

* 2. Типы с плавающей точкой (дробные)
* float		4 байта			 2^-149 или Float.MIN_VALUE		(2-2^-23)*2^127 или Float.MIN_VALUE
* Не большая точность
* double	8 байта			 2^-1074 или Double.MIN_VALUE		(2-2^-52)*2^1023 или Double.MIN_VALUE
* чуть лучше

* 3. Символьный тип
* char		2 байта			 '\u0000'				'\uffff'
* UTF 8, на самом деле - число (СИМВОЛ - ЧИСЛО, номер в UTF 8)

* 4. boolean	Размер не определен	false					true

* Не являются переменными - ЛИТЕРАЛЫ
* ЛИТЕРАЛЫ - конкретные числовые или символьные значения переменных 100, 100.1, 'T', true

* Операции с переменными
* Объявление или присваивание (инициализация)
* 1. Операция объявления означает создание новой переменной.
* 2. Инициализация  – это присвоение начального значения
* 3. Операция присваивания означает копирование значения в переменную.
* Оператор присваивания (инициализации) = (одинарное равно)

* Объявление переменной
* ТИП имя; или ТИП имя, имя, имя,..., имя;
* int i, a, b;  

* Может быть объявление с инициализацией
* ТИП имя = значение;
* int i = 0;
* double j = 0.2  
* именам нужно присваивать сложные значения, i - это только для примера
* например - double weight; int id; b и т.п.
* 
* Арифметические операции
* 1. Сложение 			- оператор "+"
* 2. Вычитание		 	- оператор "-"
* 3. Умножение			- оператор "*"
* 4. деление			- оператор "/"
* 5. Остаток от деления 	- оператор "%" 

* Вычисления с типом double - приблизительны

	double z = 0.1;
	double w = 0.2;
	double r = z*w;
* 	Результат арифметических операций с типом double r =0.020000000000000004

* Урок 3 Условия и циклы.
* Условный переход
* Условный переход - это средство для изменения хода программы в зависимости от некоторых условий
* Условием всегда является логическое (boolean) значение
*	а. Оператор И - &&
*	б. Оператор ИЛИ - ||
*	с. Оператор НЕ - !
		
	if(условие){
	действие если условие верно true
	}
	else{
	действие если условие не верно
	}


* Цикл
* Цикл - это средство для повторения участка программы в зависимости от некоторых условий.
* Условие повторения цикла имеет тот же смысл. что и при условном переходе. то есть должно равняться true, что бы цикл выполнялся.
* При выполнении цикла обязательно должен наступить такой момент. в котором значение цикла меняется на false, иначе цикл будет бесконечным.

* Цикл WHILE
* Самый простой цикл. выполняется пока условие остается истинным. то есть равняется true

	while(условие){
		тело цикла - операции. которые выполняются пока условие верное;
	}

* Цикл DO-WHILE

*Отличие от цикла WHILE в том что. тело цикла сначала выполняется, а потом проверяется условие
т.е. цикл выполнится хотя бы один раз, если условие этого цикла является ложным

	do{
		тело цикла-операци, которые выполняются пока услвие верное;
	}while(условие);


* Цикл FOR
*Позволяет не только отслеживать условие. но и задавать начальние параметры и операции по их изменению.
	
	for(начальние параметры; условие; операции с параметрами){
		тело цикла - операции которые выполняются пока условие верное;
	}










